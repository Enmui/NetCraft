diff --git a/src/library_glfw.js b/src/library_glfw.js
index dfa4896c4..ed2441afb 100644
--- a/src/library_glfw.js
+++ b/src/library_glfw.js
@@ -13,7 +13,6 @@
  * What it does not but should probably do:
  * - Transmit events when glfwPollEvents, glfwWaitEvents or glfwSwapBuffers is
  *    called. Events callbacks are called as soon as event are received.
- * - Joystick support.
  * - Input modes.
  * - Gamma ramps.
  * - Video modes.
@@ -57,6 +56,10 @@ var LibraryGLFW = {
       };
       this.buttons = 0;
       this.keys = new Array();
+      this.joyLast = 0; // GLFW_JOYSTICK_1
+      this.joys = {};
+      this.index2joy = {};
+      this.domKeys = new Array();
       this.shouldClose = 0;
       this.title = null;
       this.windowPosFunc = null; // GLFWwindowposfun
@@ -70,6 +73,7 @@ var LibraryGLFW = {
       this.cursorPosFunc = null; // GLFWcursorposfun
       this.cursorEnterFunc = null; // GLFWcursorenterfun
       this.scrollFunc = null; // GLFWscrollfun
+      this.joystickFunc = null; // GLFWjoystickfun
       this.keyFunc = null; // GLFWkeyfun
       this.charFunc = null; // GLFWcharfun
       this.userptr = null;
@@ -343,6 +347,7 @@ var LibraryGLFW = {
 
     onKeyPress: function(event) {
       if (!GLFW.active || !GLFW.active.charFunc) return;
+      if (event.ctrlKey || event.metaKey) return;
 
       // correct unicode charCode is only available with onKeyPress event
       var charCode = event.charCode;
@@ -357,16 +362,17 @@ var LibraryGLFW = {
 #endif
     },
 
-    onKeyChanged: function(event, status) {
+    onKeyChanged: function(keyCode, status) {
       if (!GLFW.active) return;
 
-      var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
+      var key = GLFW.DOMToGLFWKeyCode(keyCode);
       if (key == -1) return;
 
 #if USE_GLFW == 3
       var repeat = status && GLFW.active.keys[key];
 #endif
       GLFW.active.keys[key] = status;
+      GLFW.active.domKeys[keyCode] = status;
       if (!GLFW.active.keyFunc) return;
 
 #if USE_GLFW == 2
@@ -375,12 +381,44 @@ var LibraryGLFW = {
 
 #if USE_GLFW == 3
       if (repeat) status = 2; // GLFW_REPEAT
-      Module['dynCall_viiiii'](GLFW.active.keyFunc, GLFW.active.id, key, event.keyCode, status, GLFW.getModBits(GLFW.active));
+      Module['dynCall_viiiii'](GLFW.active.keyFunc, GLFW.active.id, key, keyCode, status, GLFW.getModBits(GLFW.active));
 #endif
     },
 
+    onGamepadConnected: function(event) {
+      if (!GLFW.active.joystickFunc) return;
+
+      // HTML5 Gamepad API reuses indexes
+      // glfw joystick API spreads them out
+      // http://www.glfw.org/docs/latest/input_guide.html#joystick
+      // "Once a joystick is detected, it keeps its assigned index until it is disconnected,
+      // so as joysticks are connected and disconnected, they will become spread out."
+      var joy = GLFW.active.joyLast++;
+      GLFW.active.joys[joy] = {
+        index: event.gamepad.index,
+        id: allocate(intArrayFromString(event.gamepad.id), 'i8', ALLOC_NORMAL),
+        buttons: allocate(new Array(event.gamepad.buttons.length), 'float', ALLOC_NORMAL),
+        axes: allocate(event.gamepad.axes, 'float', ALLOC_NORMAL)
+      };
+      GLFW.active.index2joy[event.gamepad.index] = joy;
+      Module['dynCall_vii'](GLFW.active.joystickFunc, joy, 0x00040001); // GLFW_CONNECTED
+    },
+
+    onGamepadDisconnected: function(event) {
+      if (!GLFW.active.joystickFunc) return;
+
+      var joy = GLFW.active.index2joy[event.gamepad.index];
+
+      Module['dynCall_vii'](GLFW.active.joystickFunc, joy, 0x00040002); // GLFW_DISCONNECTED
+
+      // TODO: free memory .axes, .buttons
+
+      delete GLFW.active.index2joy[event.gamepad.index];
+      delete GLFW.active.joys[joy];
+    },
+
     onKeydown: function(event) {
-      GLFW.onKeyChanged(event, 1); // GLFW_PRESS or GLFW_REPEAT
+      GLFW.onKeyChanged(event.keyCode, 1); // GLFW_PRESS or GLFW_REPEAT
 
       // This logic comes directly from the sdl implementation. We cannot
       // call preventDefault on all keydown events otherwise onKeyPress will
@@ -391,7 +429,17 @@ var LibraryGLFW = {
     },
 
     onKeyup: function(event) {
-      GLFW.onKeyChanged(event, 0); // GLFW_RELEASE
+      GLFW.onKeyChanged(event.keyCode, 0); // GLFW_RELEASE
+    },
+
+    onBlur: function(event) {
+      if (!GLFW.active) return;
+
+      for (var i = 0; i < GLFW.active.domKeys.length; ++i) {
+        if (GLFW.active.domKeys[i]) {
+          GLFW.onKeyChanged(i, 0); // GLFW_RELEASE
+        }
+      }
     },
 
     onMousemove: function(event) {
@@ -628,6 +676,30 @@ var LibraryGLFW = {
       }
     },
 
+    setJoystickCallback: function(winid, cbfun) {
+      var win = GLFW.WindowFromId(winid);
+      if (!win) return;
+      win.joystickFunc = cbfun;
+    },
+
+    refreshJoystick: function(joy) {
+      // TODO: refresh all joysticks, and call from render loop?
+      var j = GLFW.active.joys[joy];
+
+      var gamepad = navigator.getGamepads()[j.index];
+      if (!gamepad) return;
+
+      j.buttonsCount = gamepad.buttons.length;
+      for (var i = 0; i < gamepad.buttons.length; ++i) {
+        setValue(j.buttons + i, gamepad.buttons[i].pressed, 'i8');
+      }
+
+      j.axesCount = gamepad.axes.length;
+      for (var i = 0; i < gamepad.axes.length; ++i) {
+        setValue(j.axes + i*4, gamepad.axes[i], 'float');
+      }
+    },
+
     setKeyCallback: function(winid, cbfun) {
       var win = GLFW.WindowFromId(winid);
       if (!win) return;
@@ -941,9 +1013,12 @@ var LibraryGLFW = {
     GLFW.windows = new Array()
     GLFW.active = null;
 
+    window.addEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
+    window.addEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
     window.addEventListener("keydown", GLFW.onKeydown, true);
     window.addEventListener("keypress", GLFW.onKeyPress, true);
     window.addEventListener("keyup", GLFW.onKeyup, true);
+    window.addEventListener("blur", GLFW.onBlur, true);
     Module["canvas"].addEventListener("mousemove", GLFW.onMousemove, true);
     Module["canvas"].addEventListener("mousedown", GLFW.onMouseButtonDown, true);
     Module["canvas"].addEventListener("mouseup", GLFW.onMouseButtonUp, true);
@@ -959,9 +1034,12 @@ var LibraryGLFW = {
   },
 
   glfwTerminate: function() {
+    window.removeEventListener("gamepadconnected", GLFW.onGamepadConnected, true);
+    window.removeEventListener("gamepaddisconnected", GLFW.onGamepadDisconnected, true);
     window.removeEventListener("keydown", GLFW.onKeydown, true);
     window.removeEventListener("keypress", GLFW.onKeyPress, true);
     window.removeEventListener("keyup", GLFW.onKeyup, true);
+    window.removeEventListener("blur", GLFW.onBlur, true);
     Module["canvas"].removeEventListener("mousemove", GLFW.onMousemove, true);
     Module["canvas"].removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
     Module["canvas"].removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
@@ -1230,6 +1308,17 @@ var LibraryGLFW = {
   glfwGetInputMode: function(winid, mode) {
     var win = GLFW.WindowFromId(winid);
     if (!win) return;
+
+    switch (mode) {
+      case 0x00033001: { // GLFW_CURSOR
+        if (Browser.pointerLock) {
+          win.inputModes[mode] = 0x00034003; // GLFW_CURSOR_DISABLED
+        } else {
+          win.inputModes[mode] = 0x00034001; // GLFW_CURSOR_NORMAL
+        }
+      }
+    }
+
     return win.inputModes[mode];
   },
 
@@ -1280,13 +1369,43 @@ var LibraryGLFW = {
     GLFW.setScrollCallback(winid, cbfun);
   },
 
-  glfwJoystickPresent: function(joy) { throw "glfwJoystickPresent is not implemented."; },
+  glfwJoystickPresent: function(joy) {
+    return GLFW.active.joys[joy] !== undefined;
+  },
+
+  glfwGetJoystickAxes: function(joy, count) {
+    GLFW.refreshJoystick(joy);
+
+    var state = GLFW.active.joys[joy];
+    if (!state || !state.axes) {
+      setValue(count, 0, 'i32');
+      return;
+    }
+
+    setValue(count, state.axesCount, 'i32');
+    return state.axes;
+  },
 
-  glfwGetJoystickAxes: function(joy, count) { throw "glfwGetJoystickAxes is not implemented."; },
+  glfwGetJoystickButtons: function(joy, count) {
+    GLFW.refreshJoystick(joy);
 
-  glfwGetJoystickButtons: function(joy, count) { throw "glfwGetJoystickButtons is not implemented."; },
+    var state = GLFW.active.joys[joy];
+    if (!state || !state.buttons) {
+      setValue(count, 0, 'i32');
+      return;
+    }
 
-  glfwGetJoystickName: function(joy) { throw "glfwGetJoystickName is not implemented."; },
+    setValue(count, state.buttonsCount, 'i32');
+    return state.buttons;
+  },
+
+  glfwGetJoystickName: function(joy) {
+    return GLFW.active.joys[joy].id;
+  },
+
+  glfwSetJoystickCallback: function(cbfun) {
+    GLFW.setJoystickCallback(GLFW.active.id, cbfun);
+  },
 
   glfwSetClipboardString: function(win, string) {},
 
